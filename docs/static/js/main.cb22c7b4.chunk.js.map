{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA0CeA,EAvCY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,IADtF,SAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QC8BDO,EA/BC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEd,ECLwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDXwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAWpB,OACI,qCACI,6BAAKpB,IACLoB,GAAW,mBAAGJ,UAAU,iCAAb,wBACX,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,eAEQA,GADCA,EAAIC,aExBpBgB,EAAe,WAIxB,MAAoCzC,mBAAU,CAAC,gBAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,8CACA,uBACI,cAAC,EAAD,CAAcA,cAAeA,IAEjC,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCnBjC6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.cb22c7b4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    } \r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }     \r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange }\r\n                    \r\n            />\r\n        </form>\r\n        \r\n    )\r\n\r\n\r\n}\r\n\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async(category) => {\r\n    const url =`https://api.giphy.com/v1/gifs/search?api_key=jSgDGUZ5uJBctTxGy1lFGytwIz764yDb&q=${ encodeURI(category)}`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    \r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}\r\n\r\n//export default getGifs","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGridItem\r\n","//import React, {useState,useEffect} from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\n//\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n//    const [images, setImages] = useState([]);\r\n\r\n//     useEffect( ()=> {\r\n//         getGifs(category).\r\n//         then(imgs =>setImages(imgs))\r\n//     }, [category])\r\n\r\n    \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n           {loading && <p className=\"animate_animated animate_flash\">Loading...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                    ))\r\n                }    \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from \"../helpers/getGifs\"\r\n\r\n\r\nexport const useFetchGifs = ( category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n    }, [category])\r\n        \r\n    return state; //data:[] loagin:true\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState }  from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categorires = ['One Punch','Samuria X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState (['Dragon Ball']);    \r\n    \r\n    // const handleAdd = () =>{\r\n    //     setCategories ([...categories,'HunterXHunter']);\r\n    //     //setCategories (cats => [...cats, 'HunterXHunter'])\r\n    //}\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr></hr>\r\n                <AddCategory  setCategories={setCategories}/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>( \r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}